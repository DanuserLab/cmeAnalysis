%plotMaxIntensityDistribution(data, varargin) plot the maximum intensity distribution
% of CCS trajectories for different lifetime cohorts. The distribution for the
% entire cohort, and the first 5 frames are shown by default.
%
% Inputs:
%
%   data : structure generated by loadConditionData()
%
% Options ('Specifier', value):
%  
%   'FirstNFrames'  : Distribution of max. intensity of the first N frames
%                     of each trajectory. Default: 5.
%   'ShowGaussians' : Plot Gaussian fits to the first mode of the distribution.
%   'Cutoff_f'      : Minimum trajectory length, in frames. Default: 5.
%
% Francois Aguet, 2011
% Andrew R. Jamieson, 2016 - updated axes arrays to gobjects
%
% Copyright (C) 2020, Danuser Lab - UTSouthwestern 
%
% This file is part of CMEAnalysis_Package.
% 
% CMEAnalysis_Package is free software: you can redistribute it and/or modify
% it under the terms of the GNU General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
% 
% CMEAnalysis_Package is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
% GNU General Public License for more details.
% 
% You should have received a copy of the GNU General Public License
% along with CMEAnalysis_Package.  If not, see <http://www.gnu.org/licenses/>.
% 
% 

function plotMaxIntensityDistribution(data, varargin)

ip = inputParser;
ip.CaseSensitive = false;
ip.addParamValue('Mode', 'pdf', @(x) any(strcmpi(x, {'pdf', 'cdf'})));
ip.addParamValue('XTick', []);
ip.addParamValue('YTick', []);
ip.addParamValue('FirstNFrames', 5);
ip.addParamValue('CohortLB', [5  11 16 21 41 61 81]);
ip.addParamValue('CohortUB', [10 15 20 40 60 80 120]);
ip.addParamValue('DisplayMode', 'screen', @(x) any(strcmpi(x, {'screen', 'print'})));
ip.addParamValue('ShowSignificance', false, @islogical);
ip.addParamValue('ShowGaussians', false, @islogical);
ip.addParamValue('ShowFirstFrame', false, @islogical);
ip.addParamValue('LifetimeData', 'lifetimeData.mat');
ip.addParamValue('Cutoff_f', 5);
ip.parse(varargin{:});

[~, figPath] = getCellDir(data(1));
figPath = [figPath 'Figures' filesep];
[~,~] = mkdir(figPath);

mCh = strcmp(data(1).source, data(1).channels);

lb = ip.Results.CohortLB;
ub = ip.Results.CohortUB;
nc = numel(lb);

ny = nc;

lftData = getLifetimeData(data, 'ReturnValidOnly', true, 'Scale', true,...
    'Cutoff_f', 5, 'ExcludeVisitors', false, 'LifetimeData', ip.Results.LifetimeData);
A = arrayfun(@(i) i.A(:,:,mCh), lftData, 'unif', 0);
A = vertcat(A{:});
% maxA = vertcat(lftData.maxA);
maxA = nanmax(A,[],2);
f = ip.Results.FirstNFrames;

maxAFirstN = nanmax(A(:,1:f), [], 2);

lifetime_s = vertcat(lftData.lifetime_s);

% x-axis
xa = ip.Results.XTick;
if isempty(xa)
    db = prctile(maxA, [0.1 99.9]);
    mag = 10^floor(log10(db(2)));
    da = ceil(db(2)/mag)*mag/10;
    xa = (0:ceil(db(2)/da))*da;
else
    da = xa(2)-xa(1);
end
dxi = da/8;
xi = 0:dxi:xa(end)+da;

%========================================
% Generate cohorts
%========================================
maxAcohort = cell(1,nc);
maxAcohortFirstN = cell(1,nc);
A0cohort = cell(1,nc);
ni = cell(1,nc);
niFirstN = cell(1,nc);
niFirst = cell(1,nc);
for k = 1:numel(lb)
    cidx = lb(k)<=lifetime_s & lifetime_s<ub(k);
    maxAcohort{k} = maxA(cidx);
    maxAcohortFirstN{k} = maxAFirstN(cidx);
    A0cohort{k} = A(cidx,1);
    
    ni0 = hist(maxAcohort{k}, xi);
    ni{k} = ni0/sum(ni0);
    ni0 = hist(maxAcohortFirstN{k}, xi);
    niFirstN{k} = ni0/sum(ni0);
    ni0 = hist(A0cohort{k}, xi);
    niFirst{k} = ni0/sum(ni0);
end

if isempty(ip.Results.YTick)
    di = 3;
    ymax = max(cellfun(@(i) max(i), niFirstN));
    mag = 10^floor(log10(ymax/di));
    dy = ceil(ymax/mag/di)*mag;
    ya = (0:di)*dy;
else
    ya = ip.Results.YTick;
end

cf0 = [1 1 1]*0.6;
ce0 = [1 1 1]*0.3;
fset = loadFigureSettings('print');

axPos = fset.axPos;
aw = axPos(3);
ah = 0.2*aw;
xo = 1.5;
yo = 1.5;
sh = ah/3;


ha = setupFigure(nc,1,'AxesHeight', 1.2, 'YSpace', [1.5 0.4 1], 'SameAxes', true);
% duplicate axes (for grid)
ha0 = gobjects(length(ha),1);
for ii = 1:length(ha)
    ha0(ii) = axes('Position', get(ha(ii), 'Position'), 'Color', 'none');
end

% ha0 = arrayfun(@(i) axes('Position', get(i, 'Position'), 'Color', 'none'), ha, 'Unif', false);
% ha0 = [ha0{:}]';
% place duplicates in background
ch = get(gcf, 'Children');
set(gcf, 'Children', [ch(nc+1:end) ch(1:nc)]);

set(ha0, 'XGrid', 'on', 'GridLineStyle', ':', 'LineWidth', 1, 'XTick', xa,...
    'XTickLabel', [], 'YTickLabel', [], 'TickLength', [0 0]);

yal = [0 arrayfun(@(i) num2str(i, '%.2f'), ya(2:end), 'unif', 0)];
set(ha, 'XTick', xa, 'YTick', ya, 'Color', 'none',...
    'YTickLabel', yal, 'XTickLabel', []);
axis([ha; ha0], [xa(1) xa(end) ya(1) ya(end)]);

% hbg = axes('Units', 'centimeters', 'Position', [0 0 2*xo+aw+2 2*yo+ny*ah+(ny-1)*sh]);
% hold(hbg, 'on');
% axis(hbg, [0 2*xo+aw+2 0 2*yo+ny*ah+(ny-1)*sh]);
for k = 1:nc

    if ip.Results.ShowFirstFrame
        bar(ha(k), xi, niFirst{k}, 'BarWidth', 1, 'FaceColor', 0.9*[1 1 1], 'EdgeColor', 0.45*[1 1 1], 'LineWidth', 0.75);
    end
    bar(ha(k), xi, niFirstN{k}, 'BarWidth', 1, 'FaceColor', cf0, 'EdgeColor', ce0, 'LineWidth', 0.75);
    bar(ha(k), xi, ni{k}, 'BarWidth', 1, 'FaceColor', fset.cfB, 'EdgeColor', fset.ceB, 'LineWidth', 0.75);
    stairsXT(xi, niFirstN{k}, 'EdgeColor', ce0, 'LineWidth', 0.75, 'Parent', ha(k));
    if ip.Results.ShowFirstFrame
        stairsXT(xi, niFirst{k}, 'EdgeColor', ce0, 'LineWidth', 0.75, 'Parent', ha(k));
    end
    
    if ip.Results.ShowGaussians && numel(maxAcohortFirstN{k})>10
        [mu_g,sigma_g,xg,g] = fitGaussianModeToPDF(maxAcohortFirstN{k}, 'Display', false, 'FixMode', true);
        plot(xg, g*dxi, 'Color', hsv2rgb([0 1 0.9]), 'LineWidth', 1, 'Parent', ha(k));
        plot(norminv(0.99, mu_g, sigma_g)*[1 1], [0 0.15], '--', 'Parent', ha(k),...
            'Color', hsv2rgb([0 1 0.9]), 'LineWidth', 1);
    end
    
    % cohort label
    if lb(k)==ub(k)
        text(xa(end), ya(end), ['' num2str(lb(k)) ' s'], 'BackgroundColor', [1 1 1], 'Parent', ha(k),...
            'VerticalAlignment', 'top', 'HorizontalAlignment', 'right', fset.sfont{:});
    else
        text(xa(end), ya(end), ['[' num2str(lb(k)) '...' num2str(ub(k)) '] s'],...
            'VerticalAlignment', 'top', 'HorizontalAlignment', 'right', fset.sfont{:},...
            'BackgroundColor', [1 1 1], 'Parent', ha(k));
    end
    
    if k==1
        text(xa(end), ya(end)*1.35, 'Lifetime cohort', 'Parent', ha(1),...
            'VerticalAlignment', 'top', 'HorizontalAlignment', 'right', fset.sfont{:});
    end
  
    
    % plot vertical axis label (once)
    ncol = ceil(numel(lb)/ny);
    if mod(k,ny)==0
        set(ha(k), 'TickLength', [0.015 0], 'XTickLabel', xa);
        if floor(k/ny)==floor(ncol/2)+1
            hx = xlabel(ha(end), 'Max. fluo. intensity (A.U.)', fset.lfont{:});
            if mod(ncol,2)==0
                xpos = get(hx, 'Position');
                xpos(1) = xa(1);
                xpos(2) = 1.2*xpos(2);
                set(hx, 'Position', xpos);
            end
        end
    end
    if k>ny
        set(ha(k), 'YTickLabel', []);
    end
    
    if k==ceil(ny/2)
        hy = ylabel(ha(k), 'Frequency', fset.lfont{:});
        ypos = get(hy, 'Position');
        if mod(ny,2)==0
            ypos(2) = 0;
        end
        set(hy, 'Position', ypos);
    end
    
    if k>1 && ip.Results.ShowSignificance % indicate which distributions are the same
        [hval, ~] = kstest2(maxAcohortFirstN{k-1}, maxAcohortFirstN{k});
        if hval==0
            % x: after box:
            x0 = xo + aw + 0.5;
            y0 = (ny-k)*(ah+sh) + yo + (ah+sh/2)/2;
            % line width in cm
            lw = 1/(72/2.54);
            plot(hbg, [x0 x0], y0+[0 ah+sh/2], 'Color', ce0, 'LineWidth', 1);
            plot(hbg, [x0-0.1 x0], [y0 y0]+ah+sh/2-lw/2, 'Color', ce0, 'LineWidth', 1);
            plot(hbg, [x0-0.1 x0], [y0 y0]+lw/2, 'Color', ce0, 'LineWidth', 1);
            text(x0+0.1, y0+(ah+sh/2)/2-0.1, '*', fset.lfont{:}, 'Color', ce0, 'Parent', hbg, 'VerticalAlignment', 'middle')
        end
    end
end

% bring background axes to front
% ch = get(gcf, 'Children');
% set(gcf, 'Children', [hbg; setdiff(ch, hbg)]);
% axis(hbg, 'off');
